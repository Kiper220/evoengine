[
	{
		"kind": "module",
		"file": "evoengine/package.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 19,
				"name": "evoengine.utils"
			}
		],
		"comment": " EvoEngine - game development engine\n\n Description:\n EvoEngine is a game development engine for\n $(LINK2 https://dlang.org, D language) intended to\n game developers. It provides basic building blocks for writing\n games.\n\n Currently EvoEngine consists of the following packages:\n\n - $(LINK2 ./evoengine/utils.html, evoengine.utils) - basic utils used by other modules (memory management, ecs, logging, etc.)\n\n Copyright: WetGrape 2023.\n License: Mit.\n Authors: Gedert Korney\n",
		"name": "evoengine"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/containers/binary.d",
		"members": [
			{
				"line": 9,
				"kind": "enum",
				"char": 1,
				"members": [
					{
						"line": 11,
						"kind": "enum member",
						"char": 5,
						"name": "FILO",
						"protection": "public",
						"value": "0",
						"comment": "`F`irst `I`n `L`ast `O`ut\n"
					},
					{
						"line": 12,
						"kind": "enum member",
						"char": 5,
						"name": "FIFO",
						"protection": "public",
						"value": "1",
						"comment": "`F`irst `I`n `F`irst `O`ut\n"
					}
				],
				"name": "Order",
				"protection": "public",
				"baseDeco": "i",
				"comment": "\n Write/Read ordering.\n"
			},
			{
				"parameters": [
					{
						"kind": "value",
						"deco": "E9evoengine5utils10containers6binary5Order",
						"defaultValue": "Order.FILO",
						"name": "order"
					}
				],
				"line": 21,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 21,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"constraint": "!isArray!T && !isCompositeType!T",
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 24,
								"kind": "template",
								"char": 18,
								"members": [
									{
										"parameters": [
											{
												"type": "T",
												"storageClass": [
													"const",
													"ref"
												],
												"name": "data"
											}
										],
										"line": 24,
										"kind": "function",
										"char": 18,
										"name": "rawWrite",
										"type": "void(const ref T data)",
										"endchar": 5,
										"endline": 29
									}
								],
								"name": "rawWrite",
								"comment": "Help raw write method. Only write one variable to inner data buffer.\n"
							},
							{
								"constraint": "!isArray!T && !isCompositeType!T",
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 31,
								"kind": "template",
								"char": 18,
								"members": [
									{
										"parameters": [
											{
												"type": "T[]",
												"storageClass": [
													"const",
													"ref"
												],
												"name": "data"
											}
										],
										"line": 31,
										"kind": "function",
										"char": 18,
										"name": "rawWrite",
										"type": "void(const ref T[] data)",
										"endchar": 5,
										"endline": 36
									}
								],
								"name": "rawWrite",
								"comment": "Help raw write method. Only write one-dimensional array to inner data buffer.(ONE-DIMENSIONAL)\n"
							},
							{
								"constraint": "!isArray!T && !isCompositeType!T",
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 38,
								"kind": "template",
								"char": 15,
								"members": [
									{
										"line": 38,
										"kind": "function",
										"char": 15,
										"name": "rawRead",
										"type": "T()",
										"endchar": 5,
										"endline": 57
									}
								],
								"name": "rawRead",
								"comment": "Help raw read method. Only read one variable from inner data buffer.\n"
							},
							{
								"constraint": "isArray!T && !isCompositeType!T",
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 59,
								"kind": "template",
								"char": 27,
								"members": [
									{
										"parameters": [
											{
												"type": "size_t",
												"name": "length"
											}
										],
										"line": 59,
										"kind": "function",
										"char": 27,
										"name": "rawRead",
										"type": "toArrayType!T(size_t length)",
										"endchar": 5,
										"endline": 79
									}
								],
								"name": "rawRead",
								"comment": "Help raw read method. Only read one-dimensional array from inner data buffer.(ONE-DIMENSIONAL)\n"
							},
							{
								"constraint": "!isCompositeType!T",
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 81,
								"kind": "template",
								"char": 18,
								"members": [
									{
										"parameters": [
											{
												"type": "T",
												"storageClass": [
													"const",
													"ref"
												],
												"name": "data"
											}
										],
										"line": 81,
										"kind": "function",
										"char": 18,
										"name": "innerWrite",
										"type": "void(const ref T data)",
										"endchar": 5,
										"endline": 123
									}
								],
								"name": "innerWrite",
								"comment": "Inner wrap method on top rawWrite. Allow use multidimensional arrays.\n"
							},
							{
								"constraint": "!isCompositeType!T",
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 126,
								"kind": "template",
								"char": 27,
								"members": [
									{
										"line": 126,
										"kind": "function",
										"char": 27,
										"name": "innerRead",
										"type": "toArrayType!T()",
										"endchar": 5,
										"endline": 164
									}
								],
								"name": "innerRead",
								"comment": "Inner wrap method on top rawRead. Allow use multidimensional arrays.\n"
							},
							{
								"constraint": "!isCompositeType!T",
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 167,
								"kind": "template",
								"char": 17,
								"members": [
									{
										"parameters": [
											{
												"type": "T",
												"name": "data"
											}
										],
										"line": 167,
										"kind": "function",
										"char": 17,
										"name": "write",
										"type": "void(T data)",
										"endchar": 5,
										"endline": 187
									}
								],
								"name": "write",
								"comment": "Wrap on top innerWrite. Enable debuging/checking in `BinaryBuffer`.\n"
							},
							{
								"constraint": "!isCompositeType!T",
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 190,
								"kind": "template",
								"char": 26,
								"members": [
									{
										"line": 190,
										"kind": "function",
										"char": 26,
										"name": "read",
										"type": "toArrayType!T()",
										"endchar": 5,
										"endline": 199
									}
								],
								"name": "read",
								"comment": "Wrap on top innerRead. Enable debuging/checking in `BinaryBuffer`.\n"
							},
							{
								"line": 200,
								"kind": "function",
								"char": 13,
								"name": "data",
								"type": "ubyte[]()",
								"endchar": 5,
								"endline": 203
							},
							{
								"kind": "variable",
								"type": "Array!ubyte",
								"char": 17,
								"line": 205,
								"name": "mBuffer"
							}
						],
						"name": "BinaryBuffer",
						"protection": "public"
					}
				],
				"name": "BinaryBuffer",
				"protection": "public",
				"comment": "\n `BinaryBuffer` implement binary serialization structure. This structure\n  have only one template argument - `order`. If `order = Order.FIFO`, then the\n  order of reading should be the reverse of writing(`F`irst `I`n `L`ast `O`ut).\n  Else order of reading should be the order of writing(`F`irst `I`n `F`irst `O`ut).\n"
			}
		],
		"name": "evoengine.utils.containers.binary"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/containers/common.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 5,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 7,
						"kind": "variable",
						"char": 10,
						"name": "isClass",
						"init": "is(T == class)"
					}
				],
				"name": "isClass",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 9,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 11,
						"kind": "variable",
						"char": 10,
						"name": "isInterface",
						"init": "is(T == interface)"
					}
				],
				"name": "isInterface",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 13,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 15,
						"kind": "variable",
						"char": 10,
						"name": "isStruct",
						"init": "is(T == struct)"
					}
				],
				"name": "isStruct",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 17,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"enum"
						],
						"line": 19,
						"kind": "variable",
						"char": 10,
						"name": "isCompositeType",
						"init": "isClass!T || isInterface!T || isStruct!T"
					}
				],
				"name": "isCompositeType",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 21,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"kind": "alias",
						"type": "Array!(toArrayType!(ForeachType!T))",
						"char": 9,
						"line": 25,
						"name": "toArrayType"
					}
				],
				"name": "toArrayType",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 33,
				"kind": "template",
				"char": 15,
				"members": [
					{
						"parameters": [
							{
								"type": "T",
								"name": "array"
							}
						],
						"line": 33,
						"kind": "function",
						"char": 15,
						"name": "toDlibArray",
						"type": "toArrayType!T(T array)",
						"endchar": 1,
						"endline": 53
					}
				],
				"name": "toDlibArray",
				"protection": "public"
			}
		],
		"name": "evoengine.utils.containers.common"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/containers/flagarray.d",
		"members": [
			{
				"line": 5,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "b",
								"name": "flag"
							},
							{
								"deco": "m",
								"name": "index"
							}
						],
						"line": 7,
						"kind": "function",
						"originalType": "@property bool(bool flag, size_t index)",
						"char": 10,
						"name": "opIndexAssign",
						"deco": "FNdbmZb",
						"protection": "public",
						"endchar": 5,
						"endline": 28
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "index"
							}
						],
						"line": 30,
						"kind": "function",
						"originalType": "@property bool(size_t index)",
						"char": 10,
						"name": "opIndex",
						"deco": "FNdmZb",
						"protection": "public",
						"endchar": 5,
						"endline": 39
					},
					{
						"parameters": [
							{
								"deco": "S9evoengine5utils10containers9flagarray9FlagArray",
								"name": "array"
							}
						],
						"line": 41,
						"kind": "function",
						"char": 10,
						"name": "containAll",
						"deco": "FS9evoengine5utils10containers9flagarray9FlagArrayZb",
						"protection": "public",
						"endchar": 5,
						"endline": 51
					},
					{
						"parameters": [
							{
								"deco": "S9evoengine5utils10containers9flagarray9FlagArray",
								"name": "array"
							}
						],
						"line": 53,
						"kind": "function",
						"char": 10,
						"name": "containAny",
						"deco": "FS9evoengine5utils10containers9flagarray9FlagArrayZb",
						"protection": "public",
						"endchar": 5,
						"endline": 65
					}
				],
				"name": "FlagArray",
				"protection": "public"
			}
		],
		"name": "evoengine.utils.containers.flagarray"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/ecs/common/package.d",
		"members": [
			{
				"line": 4,
				"kind": "alias",
				"char": 1,
				"name": "ComponentFlags",
				"deco": "S9evoengine5utils10containers9flagarray9FlagArray",
				"protection": "public"
			},
			{
				"line": 5,
				"kind": "alias",
				"originalType": "size_t",
				"char": 1,
				"name": "ComponentTypeId",
				"deco": "m",
				"protection": "public"
			},
			{
				"line": 6,
				"kind": "alias",
				"originalType": "size_t",
				"char": 1,
				"name": "EntityId",
				"deco": "m",
				"protection": "public"
			},
			{
				"line": 7,
				"kind": "alias",
				"originalType": "size_t",
				"char": 1,
				"name": "ComponentId",
				"deco": "m",
				"protection": "public"
			},
			{
				"line": 8,
				"kind": "alias",
				"originalType": "size_t",
				"char": 1,
				"name": "SystemId",
				"deco": "m",
				"protection": "public"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 10,
				"kind": "variable",
				"char": 6,
				"name": "NoneComponentType",
				"deco": "i",
				"init": "-1",
				"protection": "public"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 11,
				"kind": "variable",
				"char": 6,
				"name": "NoneComponent",
				"deco": "i",
				"init": "-1",
				"protection": "public"
			},
			{
				"storageClass": [
					"enum"
				],
				"line": 12,
				"kind": "variable",
				"char": 6,
				"name": "NoneEntity",
				"deco": "i",
				"init": "-1",
				"protection": "public"
			}
		],
		"name": "evoengine.utils.ecs.common"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/ecs/component/component.d",
		"members": [
			{
				"line": 22,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "C9evoengine5utils6memory14blockallocator14BlockAllocator",
								"name": "blockAllocator"
							}
						],
						"line": 24,
						"kind": "constructor",
						"originalType": "(BlockAllocator blockAllocator)",
						"char": 5,
						"name": "this",
						"deco": "FC9evoengine5utils6memory14blockallocator14BlockAllocatorZCQCfQBy3ecs9componentQk16ComponentManager",
						"protection": "public",
						"endchar": 5,
						"endline": 27
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 29,
						"kind": "template",
						"char": 12,
						"members": [
							{
								"line": 29,
								"kind": "function",
								"char": 12,
								"name": "register",
								"type": "size_t()",
								"endchar": 5,
								"endline": 33
							}
						],
						"name": "register",
						"protection": "public"
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "size"
							},
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"line": 35,
						"kind": "function",
						"originalType": "size_t(size_t size, string name)",
						"char": 12,
						"name": "register",
						"deco": "FmAyaZm",
						"protection": "public",
						"endchar": 5,
						"endline": 39
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 41,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"line": 41,
								"kind": "function",
								"char": 10,
								"name": "unregister",
								"type": "void()",
								"endchar": 5,
								"endline": 46
							}
						],
						"name": "unregister",
						"protection": "public"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"line": 48,
						"kind": "function",
						"char": 10,
						"name": "unregister",
						"deco": "FAyaZv",
						"protection": "public",
						"endchar": 5,
						"endline": 53
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "componentType"
							}
						],
						"line": 55,
						"kind": "function",
						"originalType": "void(size_t componentType)",
						"char": 10,
						"name": "unregister",
						"deco": "FmZv",
						"protection": "public",
						"endchar": 5,
						"endline": 59
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 61,
						"kind": "template",
						"char": 12,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "entity"
									}
								],
								"line": 61,
								"kind": "function",
								"char": 12,
								"name": "create",
								"type": "size_t(size_t entity)",
								"endchar": 5,
								"endline": 64
							}
						],
						"name": "create",
						"protection": "public"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "m",
								"name": "entity"
							}
						],
						"line": 66,
						"kind": "function",
						"originalType": "size_t(string name, size_t entity)",
						"char": 12,
						"name": "create",
						"deco": "FAyamZm",
						"protection": "public",
						"endchar": 5,
						"endline": 69
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "componentType"
							},
							{
								"deco": "m",
								"name": "entity"
							}
						],
						"line": 71,
						"kind": "function",
						"originalType": "size_t(size_t componentType, size_t entity)",
						"char": 12,
						"name": "create",
						"deco": "FmmZm",
						"protection": "public",
						"endchar": 5,
						"endline": 74
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 76,
						"kind": "template",
						"char": 10,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "componentId"
									}
								],
								"line": 76,
								"kind": "function",
								"char": 10,
								"name": "destroy",
								"type": "void(size_t componentId)",
								"endchar": 5,
								"endline": 79
							}
						],
						"name": "destroy",
						"protection": "public"
					},
					{
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "m",
								"name": "componentId"
							}
						],
						"line": 81,
						"kind": "function",
						"originalType": "void(string name, size_t componentId)",
						"char": 10,
						"name": "destroy",
						"deco": "FAyamZv",
						"protection": "public",
						"endchar": 5,
						"endline": 84
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "componentType"
							},
							{
								"deco": "m",
								"name": "componentId"
							}
						],
						"line": 86,
						"kind": "function",
						"originalType": "void(size_t componentType, size_t componentId)",
						"char": 10,
						"name": "destroy",
						"deco": "FmmZv",
						"protection": "public",
						"endchar": 5,
						"endline": 89
					},
					{
						"storageClass": [
							"scope"
						],
						"line": 91,
						"kind": "destructor",
						"char": 5,
						"name": "~this",
						"deco": "FNlZv",
						"protection": "public",
						"endchar": 5,
						"endline": 97
					},
					{
						"line": 99,
						"kind": "variable",
						"originalType": "ClassRegistrator!IComponentArray",
						"char": 38,
						"name": "mComponentArrays",
						"deco": "S9evoengine5utils6memory16classregistrator__T16ClassRegistratorTCQCmQCf3ecs9component14componentarray15IComponentArrayZQCw",
						"protection": "public",
						"offset": 16
					},
					{
						"line": 101,
						"kind": "variable",
						"originalType": "size_t",
						"char": 12,
						"name": "mLastId",
						"deco": "m",
						"protection": "public",
						"offset": 1368
					},
					{
						"line": 102,
						"kind": "variable",
						"originalType": "BlockAllocator",
						"char": 20,
						"name": "mBlockAllocator",
						"deco": "C9evoengine5utils6memory14blockallocator14BlockAllocator",
						"protection": "public",
						"offset": 1376
					}
				],
				"name": "ComponentManager",
				"protection": "public",
				"comment": "TODO: Rewrite on PoolAllocator and optimize algorithm.\n"
			}
		],
		"comment": " Implementation Component classes for ECS.\n\n Description:\n This module contain classes for allocate and deallocate components for\n enttities in ECS. ComponentArray isn't thread-safty and needed in thread synchronizations.\n ECS is built so that it works as a separate thread - synchronizations using in communicating\n with him and communication with the systems inside.\n\n",
		"name": "evoengine.utils.ecs.component.component"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/ecs/component/componentarray.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 2,
				"name": "evoengine.utils.ecs.common"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 10,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 10,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"kind": "variable",
								"type": "size_t",
								"char": 12,
								"line": 12,
								"name": "entity"
							},
							{
								"kind": "variable",
								"type": "T",
								"char": 7,
								"line": 13,
								"name": "data"
							}
						],
						"name": "ComponentItem",
						"protection": "public"
					}
				],
				"name": "ComponentItem",
				"protection": "public"
			},
			{
				"line": 16,
				"kind": "interface",
				"char": 1,
				"members": [
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "m",
								"name": "entity"
							}
						],
						"line": 18,
						"kind": "function",
						"originalType": "size_t(size_t entity)",
						"char": 12,
						"name": "create",
						"deco": "FmZm",
						"protection": "public"
					},
					{
						"storageClass": [
							"abstract"
						],
						"parameters": [
							{
								"deco": "m",
								"name": "componentId"
							}
						],
						"line": 19,
						"kind": "function",
						"originalType": "void(size_t componentId)",
						"char": 10,
						"name": "destroy",
						"deco": "FmZv",
						"protection": "public"
					}
				],
				"name": "IComponentArray",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 22,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 22,
						"kind": "class",
						"char": 1,
						"members": [
							{
								"kind": "alias",
								"type": "ComponentItem!T",
								"char": 5,
								"line": 24,
								"name": "ComponentItemType"
							},
							{
								"parameters": [
									{
										"type": "BlockAllocator",
										"name": "allocator"
									}
								],
								"line": 26,
								"kind": "constructor",
								"char": 5,
								"name": "this",
								"type": "(BlockAllocator allocator)",
								"endchar": 5,
								"endline": 29
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "entity"
									}
								],
								"line": 31,
								"kind": "function",
								"char": 12,
								"name": "create",
								"type": "size_t(size_t entity)",
								"endchar": 5,
								"endline": 36
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "componentId"
									}
								],
								"line": 38,
								"kind": "function",
								"char": 10,
								"name": "destroy",
								"type": "void(size_t componentId)",
								"endchar": 5,
								"endline": 42
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "index"
									}
								],
								"line": 44,
								"kind": "function",
								"char": 11,
								"name": "opIndex",
								"type": "ref T(size_t index)",
								"endchar": 5,
								"endline": 47
							},
							{
								"parameters": [
									{
										"type": "int delegate(ref ComponentItemType)",
										"storageClass": [
											"scope"
										],
										"name": "dg"
									}
								],
								"line": 49,
								"kind": "function",
								"char": 9,
								"name": "opApply",
								"type": "int(scope int delegate(ref ComponentItemType) dg)",
								"endchar": 5,
								"endline": 58
							},
							{
								"parameters": [
									{
										"type": "int delegate(ref size_t)",
										"storageClass": [
											"scope"
										],
										"name": "dg"
									}
								],
								"line": 60,
								"kind": "function",
								"char": 9,
								"name": "opApply",
								"type": "int(scope int delegate(ref size_t) dg)",
								"endchar": 5,
								"endline": 69
							},
							{
								"parameters": [
									{
										"type": "int delegate(ref T)",
										"storageClass": [
											"scope"
										],
										"name": "dg"
									}
								],
								"line": 71,
								"kind": "function",
								"char": 9,
								"name": "opApply",
								"type": "int(scope int delegate(ref T) dg)",
								"endchar": 5,
								"endline": 80
							},
							{
								"line": 82,
								"kind": "destructor",
								"char": 5,
								"name": "~this",
								"endchar": 5,
								"endline": 85
							},
							{
								"kind": "variable",
								"type": "ComponentTypeId",
								"char": 21,
								"line": 87,
								"name": "componentType"
							},
							{
								"kind": "variable",
								"type": "ComponentAllocator!ComponentItemType",
								"char": 42,
								"line": 88,
								"name": "mComponents"
							}
						],
						"name": "ComponentArray",
						"protection": "public"
					}
				],
				"name": "ComponentArray",
				"protection": "public"
			},
			{
				"line": 91,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"line": 93,
						"kind": "alias",
						"char": 5,
						"name": "ComponentItemType",
						"deco": "S9evoengine5utils3ecs9component14componentarray__T13ComponentItemTAhZQt",
						"protection": "public"
					},
					{
						"parameters": [
							{
								"deco": "C9evoengine5utils6memory14blockallocator14BlockAllocator",
								"name": "allocator"
							},
							{
								"deco": "m",
								"name": "size"
							}
						],
						"line": 95,
						"kind": "constructor",
						"originalType": "(BlockAllocator allocator, size_t size)",
						"char": 5,
						"name": "this",
						"deco": "FC9evoengine5utils6memory14blockallocator14BlockAllocatormZCQCgQBz3ecs9component14componentarray19SizedComponentArray",
						"protection": "public",
						"endchar": 5,
						"endline": 98
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "entity"
							}
						],
						"overrides": [
							"evoengine.utils.ecs.component.componentarray.IComponentArray.create"
						],
						"line": 100,
						"kind": "function",
						"originalType": "size_t(size_t entity)",
						"char": 12,
						"name": "create",
						"deco": "FmZm",
						"protection": "public",
						"endchar": 5,
						"endline": 105
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "componentId"
							}
						],
						"overrides": [
							"evoengine.utils.ecs.component.componentarray.IComponentArray.destroy"
						],
						"line": 107,
						"kind": "function",
						"originalType": "void(size_t componentId)",
						"char": 10,
						"name": "destroy",
						"deco": "FmZv",
						"protection": "public",
						"endchar": 5,
						"endline": 111
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "index"
							}
						],
						"line": 113,
						"kind": "function",
						"originalType": "ubyte[](size_t index)",
						"char": 13,
						"name": "opIndex",
						"deco": "FmZAh",
						"protection": "public",
						"endchar": 5,
						"endline": 116
					},
					{
						"parameters": [
							{
								"deco": "DFKS9evoengine5utils3ecs9component14componentarray__T13ComponentItemTAhZQtZi",
								"storageClass": [
									"scope"
								],
								"name": "dg"
							}
						],
						"line": 118,
						"kind": "function",
						"originalType": "int(scope int delegate(ref ComponentItemType) dg)",
						"char": 9,
						"name": "opApply",
						"deco": "FMDFKS9evoengine5utils3ecs9component14componentarray__T13ComponentItemTAhZQtZiZi",
						"protection": "public",
						"endchar": 5,
						"endline": 121
					},
					{
						"parameters": [
							{
								"deco": "DFKmZi",
								"storageClass": [
									"scope"
								],
								"name": "dg"
							}
						],
						"line": 123,
						"kind": "function",
						"originalType": "int(scope int delegate(ref size_t) dg)",
						"char": 9,
						"name": "opApply",
						"deco": "FMDFKmZiZi",
						"protection": "public",
						"endchar": 5,
						"endline": 134
					},
					{
						"parameters": [
							{
								"deco": "DFAhZi",
								"storageClass": [
									"scope"
								],
								"name": "dg"
							}
						],
						"line": 136,
						"kind": "function",
						"char": 9,
						"name": "opApply",
						"deco": "FMDFAhZiZi",
						"protection": "public",
						"endchar": 5,
						"endline": 147
					},
					{
						"storageClass": [
							"scope"
						],
						"line": 149,
						"kind": "destructor",
						"char": 5,
						"name": "~this",
						"deco": "FNlZv",
						"protection": "public",
						"endchar": 5,
						"endline": 152
					},
					{
						"line": 154,
						"kind": "variable",
						"originalType": "ComponentTypeId",
						"char": 21,
						"name": "componentType",
						"deco": "m",
						"protection": "public",
						"offset": 24
					},
					{
						"line": 155,
						"kind": "variable",
						"originalType": "ComponentAllocator!ComponentItemType",
						"char": 42,
						"name": "mComponents",
						"deco": "C9evoengine5utils6memory18componentallocator23typedcomponentallocator__T18ComponentAllocatorTSQDpQDi3ecs9component14componentarray__T13ComponentItemTAhZQtZQDf",
						"protection": "public",
						"offset": 32
					}
				],
				"name": "SizedComponentArray",
				"interfaces": [
					"evoengine.utils.ecs.component.componentarray.IComponentArray"
				],
				"protection": "public"
			}
		],
		"name": "evoengine.utils.ecs.component.componentarray"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/ecs/entity.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 2,
				"name": "evoengine.utils.ecs.common"
			},
			{
				"line": 8,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"line": 10,
						"kind": "struct",
						"char": 5,
						"members": [
							{
								"parameters": [
									{
										"deco": "m",
										"name": "componentType"
									}
								],
								"line": 13,
								"kind": "function",
								"originalType": "bool(ComponentTypeId componentType)",
								"char": 14,
								"name": "isRegistered",
								"deco": "FmZb",
								"protection": "public",
								"endchar": 9,
								"endline": 16
							},
							{
								"parameters": [
									{
										"deco": "m",
										"name": "componentType"
									}
								],
								"line": 18,
								"kind": "function",
								"originalType": "size_t(ComponentTypeId componentType)",
								"char": 16,
								"name": "opIndex",
								"deco": "FmZm",
								"protection": "public",
								"endchar": 9,
								"endline": 22
							},
							{
								"parameters": [
									{
										"deco": "m",
										"name": "componentType"
									},
									{
										"deco": "m",
										"name": "componentId"
									}
								],
								"line": 24,
								"kind": "function",
								"originalType": "void(ComponentTypeId componentType, ComponentId componentId)",
								"char": 14,
								"name": "changeComponentId",
								"deco": "FmmZv",
								"protection": "public",
								"endchar": 9,
								"endline": 28
							},
							{
								"parameters": [
									{
										"deco": "m",
										"name": "componentType"
									},
									{
										"deco": "m",
										"name": "componentId"
									}
								],
								"line": 30,
								"kind": "function",
								"originalType": "void(ComponentTypeId componentType, ComponentId componentId)",
								"char": 14,
								"name": "registrateComponent",
								"deco": "FmmZv",
								"protection": "public",
								"endchar": 9,
								"endline": 42
							},
							{
								"parameters": [
									{
										"deco": "m",
										"name": "componentType"
									},
									{
										"deco": "m",
										"name": "componentId"
									}
								],
								"line": 44,
								"kind": "function",
								"originalType": "void(ComponentTypeId componentType, ComponentId componentId)",
								"char": 14,
								"name": "unregistrateComponent",
								"deco": "FmmZv",
								"protection": "public",
								"endchar": 9,
								"endline": 55
							},
							{
								"line": 57,
								"kind": "variable",
								"originalType": "ComponentFlags",
								"char": 24,
								"name": "mComponentFlags",
								"deco": "S9evoengine5utils10containers9flagarray9FlagArray",
								"protection": "public",
								"offset": 0
							},
							{
								"line": 58,
								"kind": "variable",
								"originalType": "Array!ComponentTypeId",
								"char": 31,
								"name": "mEntityArray",
								"deco": "S4dlib9container5array__T5ArrayTmVmi32ZQo",
								"protection": "public",
								"offset": 280
							}
						],
						"name": "EntityData",
						"protection": "public"
					},
					{
						"parameters": [
							{
								"deco": "C9evoengine5utils6memory14blockallocator14BlockAllocator",
								"name": "allocator"
							}
						],
						"line": 61,
						"kind": "constructor",
						"originalType": "(BlockAllocator allocator)",
						"char": 5,
						"name": "this",
						"deco": "FC9evoengine5utils6memory14blockallocator14BlockAllocatorZCQCfQBy3ecs6entity13EntityManager",
						"protection": "public",
						"endchar": 5,
						"endline": 64
					},
					{
						"line": 66,
						"kind": "function",
						"originalType": "size_t()",
						"char": 12,
						"name": "create",
						"deco": "FZm",
						"protection": "public",
						"endchar": 5,
						"endline": 69
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "id"
							}
						],
						"line": 71,
						"kind": "function",
						"originalType": "void(size_t id)",
						"char": 10,
						"name": "destroy",
						"deco": "FmZv",
						"protection": "public",
						"endchar": 5,
						"endline": 74
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "entity"
							},
							{
								"deco": "m",
								"name": "componentType"
							}
						],
						"line": 76,
						"kind": "function",
						"originalType": "bool(EntityId entity, ComponentTypeId componentType)",
						"char": 10,
						"name": "isRegistered",
						"deco": "FmmZb",
						"protection": "public",
						"endchar": 5,
						"endline": 79
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "entity"
							},
							{
								"deco": "m",
								"name": "componentType"
							},
							{
								"deco": "m",
								"name": "componentId"
							}
						],
						"line": 81,
						"kind": "function",
						"originalType": "void(EntityId entity, ComponentTypeId componentType, ComponentId componentId)",
						"char": 10,
						"name": "registrateComponent",
						"deco": "FmmmZv",
						"protection": "public",
						"endchar": 5,
						"endline": 84
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "entity"
							},
							{
								"deco": "m",
								"name": "componentType"
							},
							{
								"deco": "m",
								"name": "componentId"
							}
						],
						"line": 86,
						"kind": "function",
						"originalType": "void(EntityId entity, ComponentTypeId componentType, ComponentId componentId)",
						"char": 10,
						"name": "changeComponentId",
						"deco": "FmmmZv",
						"protection": "public",
						"endchar": 5,
						"endline": 89
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "entity"
							},
							{
								"deco": "m",
								"name": "componentType"
							}
						],
						"line": 91,
						"kind": "function",
						"originalType": "void(EntityId entity, ComponentTypeId componentType)",
						"char": 10,
						"name": "unregistrateComponent",
						"deco": "FmmZv",
						"protection": "public",
						"endchar": 5,
						"endline": 94
					},
					{
						"storageClass": [
							"scope"
						],
						"line": 96,
						"kind": "destructor",
						"char": 5,
						"name": "~this",
						"deco": "FNlZv",
						"protection": "public",
						"endchar": 5,
						"endline": 99
					},
					{
						"line": 101,
						"kind": "variable",
						"originalType": "ComponentAllocator!EntityData",
						"char": 35,
						"name": "mData",
						"deco": "C9evoengine5utils6memory18componentallocator23typedcomponentallocator__T18ComponentAllocatorTSQDpQDi3ecs6entity13EntityManager10EntityDataZQCp",
						"protection": "public",
						"offset": 16
					}
				],
				"name": "EntityManager",
				"protection": "public"
			}
		],
		"name": "evoengine.utils.ecs.entity"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/ecs/package.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 2,
				"name": "evoengine.utils.ecs.common"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 3,
				"name": "evoengine.utils.ecs.entity"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 4,
				"name": "evoengine.utils.ecs.component.component"
			}
		],
		"name": "evoengine.utils.ecs"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/logging/package.d",
		"members": [
			{
				"storageClass": [
					"__gshared"
				],
				"line": 4,
				"kind": "variable",
				"originalType": "GoggaLogger",
				"char": 23,
				"name": "globalLogger",
				"deco": "C5gogga4core11GoggaLogger",
				"protection": "public"
			}
		],
		"name": "evoengine.utils.logging"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/memory/blockallocator.d",
		"members": [
			{
				"line": 6,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"line": 9,
						"kind": "variable",
						"char": 19,
						"name": "data",
						"deco": "Av",
						"protection": "public",
						"offset": 8
					}
				],
				"name": "BlockType",
				"protection": "public"
			},
			{
				"line": 12,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"line": 16,
						"kind": "constructor",
						"originalType": "()",
						"char": 12,
						"name": "this",
						"deco": "FZC9evoengine5utils6memory14blockallocator14BlockAllocator",
						"protection": "public",
						"endchar": 5,
						"endline": 18
					},
					{
						"line": 20,
						"kind": "function",
						"char": 22,
						"name": "allocate",
						"deco": "FZS9evoengine5utils6memory14blockallocator9BlockType",
						"protection": "public",
						"endchar": 5,
						"endline": 45
					},
					{
						"parameters": [
							{
								"deco": "xS9evoengine5utils6memory14blockallocator9BlockType",
								"name": "block"
							}
						],
						"line": 47,
						"kind": "function",
						"originalType": "void(const BlockType block)",
						"char": 17,
						"name": "deallocate",
						"deco": "FxS9evoengine5utils6memory14blockallocator9BlockTypeZv",
						"protection": "public",
						"endchar": 5,
						"endline": 54
					},
					{
						"line": 56,
						"kind": "function",
						"originalType": "pure size_t()",
						"char": 12,
						"name": "blocksCount",
						"deco": "FNaZm",
						"protection": "public",
						"endchar": 5,
						"endline": 59
					},
					{
						"line": 61,
						"kind": "function",
						"originalType": "pure size_t()",
						"char": 12,
						"name": "allocatedMemory",
						"deco": "FNaZm",
						"protection": "public",
						"endchar": 5,
						"endline": 64
					},
					{
						"line": 66,
						"kind": "function",
						"originalType": "pure nothrow size_t()",
						"char": 12,
						"name": "blockSize",
						"deco": "FNaNbZm",
						"protection": "public",
						"endchar": 5,
						"endline": 69
					},
					{
						"storageClass": [
							"scope"
						],
						"line": 71,
						"kind": "destructor",
						"char": 5,
						"name": "~this",
						"deco": "FNlZv",
						"protection": "public",
						"endchar": 5,
						"endline": 93
					}
				],
				"name": "BlockAllocator",
				"protection": "public"
			}
		],
		"name": "evoengine.utils.memory.blockallocator"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/memory/classregistrator.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "type",
						"name": "BasicClass"
					}
				],
				"line": 18,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 18,
						"kind": "struct",
						"char": 1,
						"members": [
							{
								"line": 24,
								"kind": "struct",
								"char": 13,
								"members": [
									{
										"kind": "variable",
										"type": "BasicClass",
										"char": 20,
										"line": 26,
										"name": "mObject"
									},
									{
										"kind": "variable",
										"type": "size_t",
										"char": 16,
										"line": 27,
										"name": "mNameId"
									},
									{
										"kind": "alias",
										"type": "mNameId",
										"char": 9,
										"line": 28,
										"name": "mNextFree"
									}
								],
								"name": "ObjectData",
								"protection": "public",
								"comment": "\n `ObjectData` - contain object, nameId for remove string by id and alias for\n inner free list. NAME ID MUST BE UPDATE AFTER ALL REGISTER AND UNREGISTER.\n"
							},
							{
								"line": 35,
								"kind": "struct",
								"char": 13,
								"members": [
									{
										"parameters": [
											{
												"type": "ObjectName",
												"storageClass": [
													"const",
													"ref"
												],
												"name": "other"
											}
										],
										"line": 37,
										"kind": "function",
										"char": 14,
										"name": "opEquals",
										"type": "const bool(const ref ObjectName other)",
										"endchar": 9,
										"endline": 40
									},
									{
										"parameters": [
											{
												"type": "ObjectName",
												"storageClass": [
													"const",
													"ref"
												],
												"name": "other"
											}
										],
										"line": 42,
										"kind": "function",
										"char": 13,
										"name": "opCmp",
										"type": "const int(const ref ObjectName other)",
										"endchar": 9,
										"endline": 47
									},
									{
										"kind": "variable",
										"type": "string",
										"char": 16,
										"line": 49,
										"name": "mName"
									},
									{
										"kind": "variable",
										"type": "size_t",
										"char": 16,
										"line": 50,
										"name": "mIndex"
									}
								],
								"name": "ObjectName",
								"protection": "public",
								"comment": "\n `ObjectName` - contain name of object and object id. This struct used for create\n Set of object names for fast get id by name.\n"
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "name"
									},
									{
										"type": "BasicClass",
										"name": "object"
									}
								],
								"line": 58,
								"kind": "function",
								"char": 19,
								"name": "register",
								"type": "size_t(string name, BasicClass object)",
								"endchar": 5,
								"endline": 115,
								"comment": " registering object by name and object.\n Returns: unique object id. This object id can't be changed.\n TODO: Refactoring.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "objectId"
									},
									{
										"type": "size_t",
										"name": "nameId"
									}
								],
								"line": 117,
								"kind": "function",
								"char": 18,
								"name": "unregister",
								"type": "void(size_t objectId, size_t nameId)",
								"endchar": 5,
								"endline": 131
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "objectId"
									}
								],
								"line": 133,
								"kind": "function",
								"char": 17,
								"name": "unregister",
								"type": "void(size_t objectId)",
								"endchar": 5,
								"endline": 138
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 140,
								"kind": "function",
								"char": 17,
								"name": "unregister",
								"type": "void(string name)",
								"endchar": 5,
								"endline": 151
							},
							{
								"parameters": [
									{
										"type": "int delegate(ref BasicClass)",
										"storageClass": [
											"scope"
										],
										"name": "dg"
									}
								],
								"line": 153,
								"kind": "function",
								"char": 9,
								"name": "opApply",
								"type": "int(scope int delegate(ref BasicClass) dg)",
								"endchar": 5,
								"endline": 172
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 174,
								"kind": "function",
								"char": 12,
								"name": "getId",
								"type": "size_t(string name)",
								"endchar": 5,
								"endline": 183
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "index"
									}
								],
								"line": 185,
								"kind": "function",
								"char": 16,
								"name": "opIndex",
								"type": "BasicClass(size_t index)",
								"endchar": 5,
								"endline": 201
							},
							{
								"parameters": [
									{
										"type": "string",
										"name": "name"
									}
								],
								"line": 202,
								"kind": "function",
								"char": 16,
								"name": "opIndex",
								"type": "BasicClass(string name)",
								"endchar": 5,
								"endline": 211
							},
							{
								"line": 213,
								"kind": "function",
								"char": 18,
								"name": "sortFreeList",
								"type": "void()",
								"endchar": 5,
								"endline": 251
							},
							{
								"kind": "variable",
								"type": "Array!ObjectData",
								"char": 30,
								"line": 253,
								"name": "mObjects"
							},
							{
								"kind": "variable",
								"type": "Array!ObjectName",
								"char": 30,
								"line": 254,
								"name": "mObjectsName"
							},
							{
								"line": 256,
								"kind": "variable",
								"char": 20,
								"name": "mFirstFree",
								"init": "NoneIndex",
								"type": "size_t"
							},
							{
								"kind": "variable",
								"type": "size_t",
								"char": 20,
								"line": 257,
								"name": "mFreeCount"
							},
							{
								"line": 258,
								"kind": "variable",
								"char": 18,
								"name": "mActualFreeList",
								"deco": "b",
								"init": "false"
							}
						],
						"name": "ClassRegistrator",
						"protection": "public"
					}
				],
				"name": "ClassRegistrator",
				"protection": "public",
				"comment": "\n`ClassRegistrator` - struct that can register object of `BasicClass`\n by name. When you register object, you get unique id. By this unique\n id you can fast: unregister, get or replace object. You can do it with\n strings, but this operation is slow. You can get object id by string and\n work with object by id.\n"
			}
		],
		"name": "evoengine.utils.memory.classregistrator"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/memory/componentallocator/common.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 3,
				"name": "evoengine.utils.memory.blockallocator"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 4,
				"name": "evoengine.utils.memory.poolallocator"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 5,
				"name": "evoengine.utils.memory.blockallocator"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 6,
				"name": "evoengine.utils.memory.poolallocator"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 7,
				"name": "dlib.core.memory"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 8,
				"name": "dlib.container.array"
			},
			{
				"line": 12,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "m",
								"name": "index"
							}
						],
						"line": 15,
						"kind": "constructor",
						"originalType": "ref (size_t index)",
						"char": 12,
						"name": "this",
						"deco": "FNcmZS9evoengine5utils6memory18componentallocator6common12UnitPosition",
						"protection": "public",
						"endchar": 5,
						"endline": 19,
						"comment": "Convert inner index to UnitPosition;\n"
					},
					{
						"parameters": [
							{
								"deco": "k",
								"name": "block"
							},
							{
								"deco": "k",
								"name": "id"
							}
						],
						"line": 21,
						"kind": "constructor",
						"originalType": "ref (uint block, uint id)",
						"char": 12,
						"name": "this",
						"deco": "FNckkZS9evoengine5utils6memory18componentallocator6common12UnitPosition",
						"protection": "public",
						"endchar": 5,
						"endline": 25,
						"comment": "Construct with inner block and id.\n"
					},
					{
						"parameters": [
							{
								"deco": "S9evoengine5utils6memory18componentallocator6common12UnitPosition",
								"storageClass": [
									"ref"
								],
								"name": "position"
							}
						],
						"line": 27,
						"kind": "function",
						"char": 16,
						"name": "opCmp",
						"deco": "FKS9evoengine5utils6memory18componentallocator6common12UnitPositionZi",
						"protection": "public",
						"endchar": 5,
						"endline": 48,
						"comment": "Cmp this and position\n"
					},
					{
						"line": 50,
						"kind": "function",
						"originalType": "size_t()",
						"char": 19,
						"name": "opCast",
						"deco": "FZm",
						"protection": "public",
						"endchar": 5,
						"endline": 53,
						"comment": "Conver this to inner index.\n"
					},
					{
						"line": 55,
						"kind": "variable",
						"char": 17,
						"name": "block",
						"deco": "k",
						"protection": "public",
						"offset": 0
					},
					{
						"line": 56,
						"kind": "variable",
						"char": 17,
						"name": "id",
						"deco": "k",
						"protection": "public",
						"offset": 4
					}
				],
				"name": "UnitPosition",
				"protection": "public",
				"comment": "UnitPosition struct what contain unit position by block and index\n"
			}
		],
		"name": "evoengine.utils.memory.componentallocator.common"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/memory/componentallocator/package.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 2,
				"name": "evoengine.utils.memory.componentallocator.sizedcomponentallocator"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 3,
				"name": "evoengine.utils.memory.componentallocator.typedcomponentallocator"
			}
		],
		"name": "evoengine.utils.memory.componentallocator"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/memory/componentallocator/sizedcomponentallocator.d",
		"members": [
			{
				"line": 5,
				"kind": "class",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"deco": "C9evoengine5utils6memory14blockallocator14BlockAllocator",
								"name": "blockAllocator"
							},
							{
								"deco": "m",
								"name": "size"
							}
						],
						"line": 13,
						"kind": "constructor",
						"originalType": "(BlockAllocator blockAllocator, size_t size)",
						"char": 12,
						"name": "this",
						"deco": "FC9evoengine5utils6memory14blockallocator14BlockAllocatormZCQCgQBzQBw18componentallocator23sizedcomponentallocator23SizedComponentAllocator",
						"protection": "public",
						"endchar": 5,
						"endline": 18,
						"comment": "Default constructor. BlockAllocator needed for allocate big blocks of memory\n"
					},
					{
						"parameters": [
							{
								"deco": "DFAhZi",
								"storageClass": [
									"scope"
								],
								"name": "dg"
							}
						],
						"line": 21,
						"kind": "function",
						"char": 16,
						"name": "opApply",
						"deco": "FMDFAhZiZi",
						"protection": "public",
						"endchar": 5,
						"endline": 30,
						"comment": "Foreach all components\n"
					},
					{
						"line": 44,
						"kind": "function",
						"originalType": "size_t()",
						"char": 19,
						"name": "allocate",
						"deco": "FZm",
						"protection": "public",
						"endchar": 5,
						"endline": 66,
						"comment": "Main method to allocate and get id of component\n"
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "id"
							}
						],
						"line": 69,
						"kind": "function",
						"originalType": "void(size_t id)",
						"char": 17,
						"name": "deallocate",
						"deco": "FmZv",
						"protection": "public",
						"endchar": 5,
						"endline": 85,
						"comment": "Main method for free allocated component by id.\n"
					},
					{
						"parameters": [
							{
								"deco": "m",
								"name": "id"
							}
						],
						"line": 88,
						"kind": "function",
						"originalType": "ubyte[](size_t id)",
						"char": 20,
						"name": "opIndex",
						"deco": "FmZAh",
						"protection": "public",
						"endchar": 5,
						"endline": 92,
						"comment": "Get for reference of component by id\n"
					},
					{
						"storageClass": [
							"scope"
						],
						"line": 94,
						"kind": "destructor",
						"char": 5,
						"name": "~this",
						"deco": "FNlZv",
						"protection": "public",
						"endchar": 5,
						"endline": 100
					}
				],
				"name": "SizedComponentAllocator",
				"protection": "public"
			}
		],
		"name": "evoengine.utils.memory.componentallocator.sizedcomponentallocator"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/memory/componentallocator/typedcomponentallocator.d",
		"members": [
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 4,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 4,
						"kind": "class",
						"char": 1,
						"members": [
							{
								"line": 7,
								"kind": "struct",
								"char": 13,
								"members": [
									{
										"kind": "variable",
										"type": "IPoolAllocator!T",
										"char": 34,
										"line": 9,
										"name": "poolAllocator"
									}
								],
								"name": "ComponentsBlock",
								"protection": "public"
							},
							{
								"parameters": [
									{
										"type": "BlockAllocator",
										"name": "blockAllocator"
									}
								],
								"line": 13,
								"kind": "constructor",
								"char": 12,
								"name": "this",
								"type": "(BlockAllocator blockAllocator)",
								"endchar": 5,
								"endline": 17,
								"comment": "Default constructor. BlockAllocator needed for allocate big blocks of memory\n"
							},
							{
								"parameters": [
									{
										"type": "int delegate(ref T component)",
										"storageClass": [
											"scope"
										],
										"name": "dg"
									}
								],
								"line": 20,
								"kind": "function",
								"char": 16,
								"name": "opApply",
								"type": "int(scope int delegate(ref T component) dg)",
								"endchar": 5,
								"endline": 31,
								"comment": "Foreach all components\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "id"
									}
								],
								"line": 34,
								"kind": "function",
								"char": 26,
								"name": "idToUnitPosition",
								"type": "UnitPosition(size_t id)",
								"endchar": 5,
								"endline": 37,
								"comment": "Help function to convert id of component to UnitPostion\n"
							},
							{
								"parameters": [
									{
										"type": "UnitPosition",
										"name": "position"
									}
								],
								"line": 39,
								"kind": "function",
								"char": 20,
								"name": "unitPositionToId",
								"type": "size_t(UnitPosition position)",
								"endchar": 5,
								"endline": 42,
								"comment": "Help function to convert position(UnitPosition) of component to id\n"
							},
							{
								"line": 45,
								"kind": "function",
								"char": 19,
								"name": "allocate",
								"type": "size_t()",
								"endchar": 5,
								"endline": 67,
								"comment": "Main method to allocate and get id of component\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "id"
									}
								],
								"line": 70,
								"kind": "function",
								"char": 17,
								"name": "deallocate",
								"type": "void(size_t id)",
								"endchar": 5,
								"endline": 86,
								"comment": "Main method for free allocated component by id.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "id"
									}
								],
								"line": 89,
								"kind": "function",
								"char": 18,
								"name": "opIndex",
								"type": "ref T(size_t id)",
								"endchar": 5,
								"endline": 93,
								"comment": "Get for reference of component by id\n"
							},
							{
								"line": 95,
								"kind": "destructor",
								"char": 5,
								"name": "~this",
								"endchar": 5,
								"endline": 101
							},
							{
								"kind": "variable",
								"type": "BlockAllocator",
								"char": 28,
								"line": 103,
								"name": "mBlockAllocator"
							},
							{
								"kind": "variable",
								"type": "Array!ComponentsBlock",
								"char": 35,
								"line": 105,
								"name": "mBlocks"
							}
						],
						"name": "ComponentAllocator",
						"protection": "public"
					}
				],
				"name": "ComponentAllocator",
				"protection": "public"
			}
		],
		"name": "evoengine.utils.memory.componentallocator.typedcomponentallocator"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/memory/mallocator.d",
		"members": [
			{
				"line": 7,
				"kind": "alias",
				"char": 6,
				"name": "Allocator",
				"deco": "S9evoengine5utils6memory10mallocator15MallocAllocator",
				"protection": "public",
				"comment": "TODO: Normal implement!!!\n"
			},
			{
				"line": 9,
				"kind": "struct",
				"char": 1,
				"members": [
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 11,
						"kind": "template",
						"char": 16,
						"members": [
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "length"
									}
								],
								"line": 11,
								"kind": "function",
								"char": 16,
								"name": "allocate",
								"type": "T[](size_t length)",
								"endchar": 5,
								"endline": 25
							}
						],
						"name": "allocate",
						"protection": "public"
					},
					{
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"line": 27,
						"kind": "template",
						"char": 17,
						"members": [
							{
								"parameters": [
									{
										"type": "T[]",
										"name": "data"
									}
								],
								"line": 27,
								"kind": "function",
								"char": 17,
								"name": "deallocate",
								"type": "void(T[] data)",
								"endchar": 5,
								"endline": 32
							}
						],
						"name": "deallocate",
						"protection": "public"
					}
				],
				"name": "MallocAllocator",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "allocator"
					}
				],
				"line": 37,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 37,
						"kind": "class",
						"char": 1,
						"members": [
							{
								"line": 41,
								"kind": "struct",
								"char": 5,
								"members": [
									{
										"kind": "variable",
										"type": "string",
										"char": 16,
										"line": 43,
										"name": "file"
									},
									{
										"kind": "variable",
										"type": "string",
										"char": 16,
										"line": 44,
										"name": "func"
									},
									{
										"kind": "variable",
										"deco": "m",
										"char": 15,
										"line": 45,
										"name": "line"
									},
									{
										"kind": "variable",
										"deco": "b",
										"char": 14,
										"line": 46,
										"name": "free"
									},
									{
										"kind": "variable",
										"type": "SysTime",
										"char": 17,
										"line": 47,
										"name": "allocTime"
									}
								],
								"name": "AllocationData",
								"protection": "public"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 50,
								"kind": "template",
								"char": 16,
								"members": [
									{
										"parameters": [
											{
												"type": "size_t",
												"name": "length"
											},
											{
												"type": "string",
												"default": "__FILE__",
												"name": "file"
											},
											{
												"type": "string",
												"default": "__PRETTY_FUNCTION__",
												"name": "func"
											},
											{
												"deco": "m",
												"default": "__LINE__",
												"name": "line"
											}
										],
										"line": 50,
										"kind": "function",
										"char": 16,
										"name": "allocate",
										"type": "T[](size_t length, string file = __FILE__, string func = __PRETTY_FUNCTION__, ulong line = __LINE__)",
										"endchar": 5,
										"endline": 65
									}
								],
								"name": "allocate"
							},
							{
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"line": 67,
								"kind": "template",
								"char": 17,
								"members": [
									{
										"parameters": [
											{
												"type": "T[]",
												"name": "data"
											}
										],
										"line": 67,
										"kind": "function",
										"char": 17,
										"name": "deallocate",
										"type": "void(T[] data)",
										"endchar": 5,
										"endline": 86
									}
								],
								"name": "deallocate"
							},
							{
								"storageClass": [
									"static",
									"__gshared"
								],
								"line": 102,
								"kind": "variable",
								"char": 45,
								"name": "gAllocations",
								"type": "AllocationData[size_t]"
							}
						],
						"name": "DebugWrapper",
						"protection": "public"
					}
				],
				"name": "DebugWrapper",
				"protection": "public",
				"comment": "TODO: Add leaks output and normal errors logging.\n"
			}
		],
		"name": "evoengine.utils.memory.mallocator"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/memory/package.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 2,
				"name": "evoengine.utils.memory.mallocator"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 3,
				"name": "evoengine.utils.memory.blockallocator"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 4,
				"name": "evoengine.utils.memory.componentallocator"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 5,
				"name": "evoengine.utils.memory.classregistrator"
			}
		],
		"name": "evoengine.utils.memory"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/memory/poolallocator.d",
		"members": [
			{
				"storageClass": [
					"enum"
				],
				"line": 14,
				"kind": "variable",
				"char": 6,
				"name": "NoneIndex",
				"deco": "i",
				"init": "-1",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 16,
				"kind": "template",
				"char": 8,
				"members": [
					{
						"parameters": [
							{
								"type": "size_t",
								"name": "bytes"
							}
						],
						"line": 16,
						"kind": "function",
						"char": 8,
						"name": "typesInBytes",
						"type": "size_t(size_t bytes)",
						"endchar": 1,
						"endline": 19
					}
				],
				"name": "typesInBytes",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "F"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 21,
				"kind": "template",
				"char": 5,
				"members": [
					{
						"parameters": [
							{
								"type": "F[]",
								"name": "from"
							}
						],
						"line": 21,
						"kind": "function",
						"char": 5,
						"name": "convertationWithTruncation",
						"type": "T[](F[] from)",
						"endchar": 1,
						"endline": 24
					}
				],
				"name": "convertationWithTruncation",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"line": 29,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 29,
						"kind": "interface",
						"char": 1,
						"members": [
							{
								"kind": "function",
								"line": 32,
								"char": 12,
								"type": "size_t()",
								"comment": "Allocate one element and get her index.\n",
								"name": "allocate"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "index"
									}
								],
								"line": 34,
								"kind": "function",
								"char": 10,
								"name": "deallocate",
								"type": "void(size_t index)",
								"comment": "Deallocate one element by her index.\n"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "count"
									}
								],
								"line": 36,
								"kind": "function",
								"char": 18,
								"name": "allocate",
								"type": "Array!size_t(size_t count)",
								"comment": "Allocate a set of count of element and return array with indexes(none GC array for optimizations).\n"
							},
							{
								"parameters": [
									{
										"type": "size_t[]",
										"name": "deallocate"
									}
								],
								"line": 38,
								"kind": "function",
								"char": 10,
								"name": "deallocate",
								"type": "void(size_t[] deallocate)",
								"comment": "Deallocate a set of element(D array, so as not to duplicate the array).\n"
							},
							{
								"kind": "function",
								"line": 40,
								"char": 12,
								"type": "size_t()",
								"comment": "Return max count of elements.\n",
								"name": "max"
							},
							{
								"kind": "function",
								"line": 42,
								"char": 12,
								"type": "size_t()",
								"comment": "Return avaliable for allocation count of element.\n",
								"name": "avaliable"
							},
							{
								"kind": "function",
								"line": 44,
								"char": 12,
								"type": "size_t()",
								"comment": "Return count of occupied elements.\n",
								"name": "allocated"
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "index"
									}
								],
								"line": 53,
								"kind": "function",
								"char": 25,
								"name": "opIndex",
								"type": "ForeachType!T[](size_t index)",
								"comment": "\n   For opIndex there are three cases: If static array return dynamic\n   array pointing on array in IPoolAllocator, else if array is dynamic\n   then like in first case returning dynamic array, else return\n   reference to the element, becouse that is not array.\n"
							},
							{
								"parameters": [
									{
										"type": "int delegate(ForeachType!T[] component)",
										"storageClass": [
											"scope"
										],
										"name": "dg"
									}
								],
								"line": 54,
								"kind": "function",
								"char": 20,
								"name": "opApply",
								"type": "int(scope int delegate(ForeachType!T[] component) dg)",
								"comment": "\n   For opIndex there are three cases: If static array return dynamic\n   array pointing on array in IPoolAllocator, else if array is dynamic\n   then like in first case returning dynamic array, else return\n   reference to the element, becouse that is not array.\n"
							}
						],
						"name": "IPoolAllocator",
						"protection": "public"
					}
				],
				"name": "IPoolAllocator",
				"protection": "public",
				"comment": "TODO: Add freelist sort stability for allocation(optimize memory usage and etc.)\n\nInterface of all PoolAllocator with index adressation.\n"
			},
			{
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "alias",
						"defaultAlias": "BlockAllocator",
						"name": "blockAllocator"
					},
					{
						"kind": "alias",
						"defaultAlias": "BlockType",
						"name": "blockType"
					}
				],
				"line": 68,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 68,
						"kind": "class",
						"char": 1,
						"members": [
							{
								"line": 76,
								"kind": "union",
								"char": 13,
								"members": [
									{
										"kind": "variable",
										"type": "size_t",
										"char": 16,
										"line": 78,
										"name": "mNextFree"
									},
									{
										"kind": "variable",
										"type": "T",
										"char": 11,
										"line": 79,
										"name": "component"
									}
								],
								"name": "Component",
								"protection": "public",
								"comment": "Inner Component type. In diferend contexts Component can be index of next free componet, or can be component\n"
							},
							{
								"parameters": [
									{
										"type": "blockAllocator",
										"name": "allocator"
									}
								],
								"line": 82,
								"kind": "constructor",
								"char": 5,
								"name": "this",
								"type": "(blockAllocator allocator)",
								"endchar": 5,
								"endline": 88
							},
							{
								"line": 90,
								"kind": "function",
								"char": 12,
								"name": "allocate",
								"type": "size_t()",
								"endchar": 5,
								"endline": 109
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "index"
									}
								],
								"line": 111,
								"kind": "function",
								"char": 10,
								"name": "deallocate",
								"type": "void(size_t index)",
								"endchar": 5,
								"endline": 129
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "count"
									}
								],
								"line": 131,
								"kind": "function",
								"char": 18,
								"name": "allocate",
								"type": "Array!size_t(size_t count)",
								"endchar": 5,
								"endline": 152
							},
							{
								"parameters": [
									{
										"type": "size_t[]",
										"name": "deallocate"
									}
								],
								"line": 154,
								"kind": "function",
								"char": 10,
								"name": "deallocate",
								"type": "void(size_t[] deallocate)",
								"endchar": 5,
								"endline": 178
							},
							{
								"line": 180,
								"kind": "function",
								"char": 12,
								"name": "max",
								"type": "size_t()",
								"endchar": 5,
								"endline": 183
							},
							{
								"line": 185,
								"kind": "function",
								"char": 12,
								"name": "avaliable",
								"type": "size_t()",
								"endchar": 5,
								"endline": 188
							},
							{
								"line": 190,
								"kind": "function",
								"char": 12,
								"name": "allocated",
								"type": "size_t()",
								"endchar": 5,
								"endline": 193
							},
							{
								"line": 195,
								"kind": "function",
								"char": 18,
								"name": "sortFreeList",
								"type": "void()",
								"endchar": 5,
								"endline": 233
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "index"
									}
								],
								"line": 238,
								"kind": "function",
								"char": 25,
								"name": "opIndex",
								"type": "ForeachType!T[](size_t index)",
								"endchar": 9,
								"endline": 241
							},
							{
								"parameters": [
									{
										"type": "int delegate(ForeachType!T[] component)",
										"storageClass": [
											"scope"
										],
										"name": "dg"
									}
								],
								"line": 243,
								"kind": "function",
								"char": 20,
								"name": "opApply",
								"type": "int(scope int delegate(ForeachType!T[] component) dg)",
								"endchar": 9,
								"endline": 263
							},
							{
								"line": 299,
								"kind": "destructor",
								"char": 5,
								"name": "~this",
								"endchar": 5,
								"endline": 302
							},
							{
								"kind": "variable",
								"type": "blockAllocator",
								"char": 20,
								"line": 304,
								"name": "mAllocator"
							},
							{
								"kind": "variable",
								"type": "blockType",
								"char": 15,
								"line": 305,
								"name": "mBlock"
							},
							{
								"kind": "variable",
								"type": "Component[]",
								"char": 17,
								"line": 307,
								"name": "mArray"
							},
							{
								"line": 308,
								"kind": "variable",
								"char": 10,
								"name": "mActualFreeList",
								"deco": "b",
								"init": "true"
							},
							{
								"line": 310,
								"kind": "variable",
								"char": 12,
								"name": "mFirstFree",
								"init": "NoneIndex",
								"type": "size_t"
							},
							{
								"line": 311,
								"kind": "variable",
								"char": 12,
								"name": "mAllocated",
								"init": "0",
								"type": "size_t"
							},
							{
								"line": 312,
								"kind": "variable",
								"char": 12,
								"name": "mLast",
								"init": "0",
								"type": "size_t"
							}
						],
						"name": "PoolAllocator",
						"protection": "public"
					}
				],
				"name": "PoolAllocator",
				"protection": "public"
			},
			{
				"parameters": [
					{
						"kind": "alias",
						"defaultAlias": "BlockAllocator",
						"name": "blockAllocator"
					},
					{
						"kind": "alias",
						"defaultAlias": "BlockType",
						"name": "blockType"
					}
				],
				"line": 315,
				"kind": "template",
				"char": 1,
				"members": [
					{
						"line": 315,
						"kind": "class",
						"char": 1,
						"members": [
							{
								"parameters": [
									{
										"type": "blockAllocator",
										"name": "allocator"
									},
									{
										"type": "size_t",
										"name": "size"
									}
								],
								"line": 319,
								"kind": "constructor",
								"char": 5,
								"name": "this",
								"type": "(blockAllocator allocator, size_t size)",
								"endchar": 5,
								"endline": 331
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "index"
									}
								],
								"line": 333,
								"kind": "function",
								"char": 24,
								"name": "componentIndex",
								"type": "ref size_t(size_t index)",
								"endchar": 5,
								"endline": 337
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "index"
									}
								],
								"line": 339,
								"kind": "function",
								"char": 21,
								"name": "componentByIndex",
								"type": "ubyte[](size_t index)",
								"endchar": 5,
								"endline": 343
							},
							{
								"line": 345,
								"kind": "function",
								"char": 12,
								"name": "allocate",
								"type": "size_t()",
								"endchar": 5,
								"endline": 363
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "index"
									}
								],
								"line": 365,
								"kind": "function",
								"char": 10,
								"name": "deallocate",
								"type": "void(size_t index)",
								"endchar": 5,
								"endline": 381
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "count"
									}
								],
								"line": 383,
								"kind": "function",
								"char": 18,
								"name": "allocate",
								"type": "Array!size_t(size_t count)",
								"endchar": 5,
								"endline": 404
							},
							{
								"parameters": [
									{
										"type": "size_t[]",
										"name": "deallocate"
									}
								],
								"line": 406,
								"kind": "function",
								"char": 10,
								"name": "deallocate",
								"type": "void(size_t[] deallocate)",
								"endchar": 5,
								"endline": 429
							},
							{
								"line": 431,
								"kind": "function",
								"char": 12,
								"name": "max",
								"type": "size_t()",
								"endchar": 5,
								"endline": 434
							},
							{
								"line": 436,
								"kind": "function",
								"char": 12,
								"name": "avaliable",
								"type": "size_t()",
								"endchar": 5,
								"endline": 439
							},
							{
								"line": 441,
								"kind": "function",
								"char": 12,
								"name": "allocated",
								"type": "size_t()",
								"endchar": 5,
								"endline": 444
							},
							{
								"line": 446,
								"kind": "function",
								"char": 18,
								"name": "sortFreeList",
								"type": "void()",
								"endchar": 5,
								"endline": 484
							},
							{
								"parameters": [
									{
										"type": "size_t",
										"name": "index"
									}
								],
								"line": 486,
								"kind": "function",
								"char": 13,
								"name": "opIndex",
								"type": "ubyte[](size_t index)",
								"endchar": 5,
								"endline": 489
							},
							{
								"parameters": [
									{
										"type": "int delegate(ubyte[] component)",
										"storageClass": [
											"scope"
										],
										"name": "dg"
									}
								],
								"line": 491,
								"kind": "function",
								"char": 16,
								"name": "opApply",
								"type": "int(scope int delegate(ubyte[] component) dg)",
								"endchar": 5,
								"endline": 513
							},
							{
								"line": 515,
								"kind": "destructor",
								"char": 5,
								"name": "~this",
								"endchar": 5,
								"endline": 518
							},
							{
								"kind": "variable",
								"type": "blockAllocator",
								"char": 20,
								"line": 520,
								"name": "mAllocator"
							},
							{
								"kind": "variable",
								"type": "blockType",
								"char": 15,
								"line": 521,
								"name": "mBlock"
							},
							{
								"kind": "variable",
								"type": "ubyte[]",
								"char": 13,
								"line": 523,
								"name": "mArray"
							},
							{
								"line": 524,
								"kind": "variable",
								"char": 10,
								"name": "mActualFreeList",
								"deco": "b",
								"init": "true"
							},
							{
								"storageClass": [
									"const"
								],
								"line": 526,
								"kind": "variable",
								"char": 18,
								"name": "mElementSize",
								"type": "size_t"
							},
							{
								"storageClass": [
									"const"
								],
								"line": 527,
								"kind": "variable",
								"char": 18,
								"name": "mLength",
								"type": "size_t"
							},
							{
								"line": 529,
								"kind": "variable",
								"char": 12,
								"name": "mFirstFree",
								"init": "NoneIndex",
								"type": "size_t"
							},
							{
								"line": 530,
								"kind": "variable",
								"char": 12,
								"name": "mAllocated",
								"init": "0",
								"type": "size_t"
							},
							{
								"line": 531,
								"kind": "variable",
								"char": 12,
								"name": "mLast",
								"init": "0",
								"type": "size_t"
							}
						],
						"name": "SizedPoolAllocator",
						"protection": "public"
					}
				],
				"name": "SizedPoolAllocator",
				"protection": "public"
			}
		],
		"comment": "\n PoolAllocator with index adressation.\n In constructor Pool allocator allocate big block of memory.\n Pool allocator have three implementations:\n first for compile-time type identification, second for real-time size identification,\n third like interface for others, and implement custom PoolAllocator with custom optimizations.\n (two for support scripting languages).\n",
		"name": "evoengine.utils.memory.poolallocator"
	},
	{
		"kind": "module",
		"file": "evoengine/utils/package.d",
		"members": [
			{
				"kind": "import",
				"char": 15,
				"line": 6,
				"name": "evoengine.utils.memory"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 7,
				"name": "evoengine.utils.logging"
			},
			{
				"kind": "import",
				"char": 15,
				"line": 8,
				"name": "evoengine.utils.ecs"
			}
		],
		"name": "evoengine.utils"
	},
	{
		"kind": "module",
		"file": "../../../../.dub/packages/silly-1.1.1/silly/silly.d",
		"members": [],
		"name": "silly"
	}
]